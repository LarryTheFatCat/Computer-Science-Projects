"""
author: Tarkan Zarrouk
date: 04/10/2024
A password manager for your techy friends
"""

import cryptography.fernet
import getpass
import os
import subprocess


def generate_key_file() -> None:
    """Generates a file that contains the secret encryption key"""
    key = cryptography.fernet.Fernet.generate_key()

    # Write that key to a binary file
    with open("passman.key", mode="wb") as f_out:
        f_out.write(key)


def encrypt_file(fn: str) -> None:
    """Encrypt a file using our secret key generated by the fernet algorithm"""
    # 0. Read in the key
    with open("passman.key", mode="rb") as f_in:
        key = f_in.read()

    fernet_alg = cryptography.fernet.Fernet(key)
    # 1. Read the raw data of our file
    with open(fn, mode="rb") as f_in:
        passman_db = f_in.read()

    # 2. Encrypt that raw data
    encrypted_db = fernet_alg.encrypt(passman_db)

    # 3. Write the encrypted data to our file
    with open(fn, mode="wb") as f_out:
        f_out.write(encrypted_db)


def decrypt_file(fn: str) -> None:
    """Encrypt a file using our secret key generated by the fernet algorithm"""
    # 0. Read in the key
    with open("passman.key", mode="rb") as f_in:
        key = f_in.read()

    fernet_alg = cryptography.fernet.Fernet(key)
    # 1. Read the encryted data of our file
    with open(fn, mode="rb") as f_in:
        encrypted_db = f_in.read()

    # 2. Decrypt that raw data
    passman_db = fernet_alg.decrypt(encrypted_db)

    # 3. Write the decrypted data to our file
    with open(fn, mode="wb") as f_out:
        f_out.write(passman_db)


def text_to_clipboard(text: str) -> None:
    """Send the given text to the clipboard"""
    cmd = f"echo|set /p={text}|clip"
    subprocess.check_call(cmd, shell=True)


def write_account_to_file(fn: str, ws: str, un: str, ps: str) -> None:
    """Write a website, username, password to a line in our passman database"""
    with open(fn, mode="a") as f_out:
        f_out.write(ws + ",")
        f_out.write(un + ",")
        f_out.write(ps + "\n")


def get_account_information(fn: str, ws: str) -> tuple[str, str]:
    """Retrieve the username and password of a website from our passman database"""
    # Read from the database, split up the account into website, username, password and
    # send back the username
    with open(fn, mode="r") as f_in:
        pm_database = f_in.read().splitlines()

    for account in pm_database:
        # Pattern matching
        [website, username, password] = account.split(",")

        if ws in website:
            return username, password
    return None, None


def show_accounts(fn: str) -> None:
    """Show all saved accounts in the passman database"""
    print()
    print("Accounts:")

    with open(fn, mode="r") as f_in:
        accounts = f_in.readlines()

    for account in accounts:
        [website, _, _] = account.split(",")
        print(website)

    print()


def commands_menu() -> str:
    """Prints a command menu and allows the user to enter their choice"""
    print("Commands menu:")
    print("\t[a] Add an account")
    print("\t[u] Get username of account")
    print("\t[p] Get password of account")
    print("\t[s] Show saved accounts")
    print("\t[q] Quit.")
    user_input = input("> ").lower().strip()
    if user_input not in "aupsq":
        print("Invalid command. ðŸ‘€")
        return "q"
    return user_input


def main() -> None:
    # Intro
    print("Welcome to Passmanâ„¢")

    # Generate key file if it does not exist
    if not os.path.exists("passman.key"):
        generate_key_file()

    # Create passman.csv if it does not exist
    if not os.path.exists("passman.csv"):
        open("passman.csv", mode="w").close()

    # Begin interactive session
    command = commands_menu()
    while command != "q":
        if command == "a":
            website = input("Please enter a website: ")
            username = input("Please enter a username: ")
            password = getpass.getpass("Please enter a password: ")

            decrypt_file("passman.csv")
            write_account_to_file("passman.csv", website, username, password)
            encrypt_file("passman.csv")
            print("Success. ðŸ’¯")
        elif command == "u":
            website_input = input("Please enter the website: ")

            decrypt_file("passman.csv")
            username, _ = get_account_information("passman.csv", website_input)
            encrypt_file("passman.csv")

            text_to_clipboard(username)
            print(f"Username for {website_input} is on your ðŸ“‹")
        elif command == "p":
            website_input = input("Please enter the website: ")

            decrypt_file("passman.csv")
            _, password = get_account_information("passman.csv", website_input)
            encrypt_file("passman.csv")

            text_to_clipboard(password)
            print(f"Password for {website_input} is on your ðŸ“‹")
        elif command == "s":
            decrypt_file("passman.csv")
            show_accounts("passman.csv")
            encrypt_file("passman.csv")

        command = commands_menu()
    # Output
    print("Thanks for using Passmanâ„¢. Have the day you deserve.")


if __name__ == "__main__":
    main()